@page "/login"
@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager

@if (_showErrors)
{
    <Message Text="@_error" Class="error-message btn-btn alert-danger" />
}
<div class="card">
    <div class="card-body">
        <h3 class="card-title">Login</h3>
        <EditForm Model="_loginInputModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group mt-2">
                <label for="email">Email</label>
                <InputText id="email" placeholder="Email is required" class="form-control" @bind-Value="_loginInputModel.Email" />
                <ValidationMessage For="@(() => _loginInputModel.Email)" />
            </div>
            <div class="form-group mt-2">
                <label for="password">Password</label>
                <InputText type="password" placeholder="Password is required" id="password" class="form-control" @bind-Value="_loginInputModel.Password" />
                <ValidationMessage For="@(() => _loginInputModel.Password)" />
            </div>
            <button type="submit" class="btn btn-primary mt-2">Login</button>
            <NavLink href="user/register">
                Register
            </NavLink>
        </EditForm>
    </div>
</div>

@code {
    private readonly LoginInputModel _loginInputModel = new LoginInputModel();
    private string _error = string.Empty;
    private bool _showErrors;

    private async Task HandleLogin()
    {
        try
        {
            var result = await AuthenticationService.Login(_loginInputModel);
            if (string.IsNullOrEmpty(result.Message))
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                _error = result.Message;
                _showErrors = true;
            }
        }
        catch (Exception ex)
        {
            _error = ex.Message;
            _showErrors = true;
        }
    }
}